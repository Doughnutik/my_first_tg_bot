import telebot
from telebot import types
import webbrowser
import sqlite3
import config
import requests
import json
import os.path as op
import urllib.request
from datetime import date
from currency_converter import ECB_URL, CurrencyConverter, currency_converter
from time import sleep
from random import choice

def init():
    global currency, bot
    conn = sqlite3.connect('mybot.db')
    cur = conn.cursor()
    cur.execute('CREATE TABLE IF NOT EXISTS users (id int auto increment primary key, user_id varchar(20), name varchar(100), username varchar(100))')
    conn.commit()
    cur.close()
    conn.close()
    
    filename = f"ecb_{date.today():%Y%m%d}.zip"
    if not op.isfile(filename):
        urllib.request.urlretrieve(ECB_URL, filename)
    currency = CurrencyConverter(filename)
    
    bot = telebot.TeleBot(config.BOT_TOKEN)

bot = None
currency = None
init()

def check_registration(message):
    conn = sqlite3.connect('mybot.db')
    cur = conn.cursor()
    cur.execute("SELECT rowid FROM users WHERE user_id = ?", (str(message.from_user.id),))
    data = cur.fetchone()
    return data

def get_name_from_message(message):
    user = message.from_user
    return (user.first_name if user.first_name else '') + ' ' + (user.last_name if user.last_name else '')

@bot.message_handler(commands=['register'])
def register(message):
    if check_registration(message):
        bot.send_message(message.chat.id, '–Ø —Ü–µ–Ω—é —Ç–≤–æ—ë –∂–µ–ª–∞–Ω–∏–µ –≤—Å—Ç—É–ø–∏—Ç—å –≤ —Ä—è–¥—ã, –Ω–æ –≤ —ç—Ç–æ–º –Ω–µ—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏. –¢—ã —É–∂–µ –≤ –Ω–∏—Ö —Å–æ—Å—Ç–æ–∏—à—å üòÅ')
        return
    conn = sqlite3.connect('mybot.db')
    cur = conn.cursor()
    user = message.from_user
    cur.execute("INSERT INTO users (user_id, name, username) VALUES ('%s', '%s', '%s')" %
    (user.id, get_name_from_message(message), user.username))
    conn.commit()
    cur.close()
    conn.close()
    bot.send_message(message.chat.id, f'{get_name_from_message(message)}, –ì–µ–Ω–µ—Ä–∞–ª –ü–µ—Ä–µ–ø–µ—á–∫–æ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–∏–ª –≤–∞—Å –≤ —Ä—è–¥—ã –¥–æ–±—Ä–æ–≤–æ–ª—å—Ü–µ–≤. –î–∞ –±—É–¥–µ—Ç –ê–†–ú–ò–Ø!')

@bot.message_handler(commands=['weather'])
def get_weather(message):
    if not check_registration(message):
        bot.send_message(message.chat.id, '–°–Ω–∞—á–∞–ª–∞ –Ω—É–∂–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è')
        return
    bot.reply_to(message, '–£–∫–∞–∂–∏—Ç–µ –≥–æ—Ä–æ–¥, –≤ –∫–æ—Ç–æ—Ä–æ–º –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç –ø–æ–≥–æ–¥–∞')
    bot.register_next_step_handler(message, get_city_weather)

def get_city_weather(message):
    city = message.text.strip().lower()
    result = requests.get(f'https://api.openweathermap.org/data/2.5/weather?q={city}&appid={config.API_WEATHER}&units=metric&lang=ru')
    if result.status_code == 200:
        data = json.loads(result.text)
        print(data)
        bot.reply_to(message, f'''–ü–æ–≥–æ–¥–∞ –≤ {city}:
–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {data['main']['temp']} 
–û—â—É—â–∞–µ—Ç—Å—è: {data['main']['feels_like']}
–û—Å–∞–¥–∫–∏: {data['weather'][0]['description']}
–î–∞–≤–ª–µ–Ω–∏–µ: {0.75 * int(data['main']['pressure'])} –º–º —Ä—Ç. —Å—Ç.
–í–∏–¥–∏–º–æ—Å—Ç—å: {data['visibility']} –º–µ—Ç—Ä–æ–≤
–°–∫–æ—Ä–æ—Å—Ç—å –≤–µ—Ç—Ä–∞: {data['wind']['speed']} –º/c
–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤–µ—Ç—Ä–∞: {data['wind']['deg']} –≥—Ä–∞–¥—É—Å–æ–≤
        ''')
    else:
        bot.reply_to(message, '–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞')
        
@bot.message_handler(content_types=['voice'])
def get_audio(message):
    if not check_registration(message):
        bot.send_message(message.chat.id, '–°–Ω–∞—á–∞–ª–∞ –Ω—É–∂–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è')
        return
    markup = types.InlineKeyboardMarkup()
    btn1 = types.InlineKeyboardButton('–ü–µ—Ä–µ–π—Ç–∏ –∫ –≥–µ–Ω–µ—Ä–∞–ª—É –ü–µ—Ä–µ–ø–µ—á–∫–æ', url=config.PEREPECHKO_IMAGE)
    btn2 = types.InlineKeyboardButton('–£–¥–∞–ª–∏—Ç—å –≤—ã—Å–∫–∞–∑—ã–≤–∞–Ω–∏–µ', callback_data='delete')
    btn3 = types.InlineKeyboardButton('–ò–∑–º–µ–Ω–∏—Ç—å –≤—ã—Å–∫–∞–∑—ã–≤–∞–Ω–∏–µ', callback_data='edit')
    markup.row(btn1, btn2)
    markup.add(btn3)
    bot.reply_to(message, '–ö—Ç–æ —Ç–µ–±–µ –ø–æ–∑–≤–æ–ª–∏–ª –≥–æ–≤–æ—Ä–∏—Ç—å, —Å–∞–ª–∞–≥–∞?', reply_markup=markup)

@bot.callback_query_handler(func=lambda callback: callback.data == 'edit' or callback.data == 'delete')
def callback_message(callback):
    if callback.data == 'delete':
        bot.delete_message(callback.message.chat.id, callback.message.message_id - 1)
        bot.edit_message_text('–°–ª–æ–≤–æ –Ω–µ –≤–æ—Ä–æ–±–µ–π, –Ω–æ –≥–µ–Ω–µ—Ä–∞–ª –µ–≥–æ –ø–æ–π–º–∞–ª', callback.message.chat.id, callback.message.message_id)
    elif callback.data == 'edit':
        bot.edit_message_text('–ì–µ–Ω–µ—Ä–∞–ª –ü–µ—Ä–µ–ø–µ—á–∫–æ –ø—Ä–∏–±—ã–ª –Ω–∞ –∑–∞–¥–∞–Ω–∏–µ', callback.message.chat.id, callback.message.message_id)

@bot.message_handler(commands=['site'])
def site(message):
    if not check_registration(message):
        bot.send_message(message.chat.id, '–°–Ω–∞—á–∞–ª–∞ –Ω—É–∂–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è')
        return
    bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –Ω—É–∂–Ω—ã–π –≤–∞–º —Å–∞–π—Ç (–º–æ–∂–Ω–æ –±–µ–∑ https)')
    bot.register_next_step_handler(message, open_site)
    
def open_site(message):
    text = message.text.strip()
    if len(text) < 8 or text[:8] != 'https://':
        webbrowser.open('https://' + text)
    else:
        webbrowser.open(text)

@bot.message_handler(commands=['start'])
def start(message):
    bot.send_message(message.chat.id, f'–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é —Ç–µ–±—è, —Å–æ–ª–¥–∞—Ç {get_name_from_message(message)}. –ù–∞ —Å–≤—è–∑–∏ –≥–µ–Ω–µ—Ä–∞–ª –ü–µ—Ä–µ–ø–µ—á–∫–æ!')
    bot.send_sticker(message.chat.id, config.STICKER)
    file = open('video.mp4', 'rb')
    bot.send_message(message.chat.id, '–ß—Ç–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–æ–º –±–æ—Ç–∞, –Ω—É–∂–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è. –ù–∏–∂–µ –≤–∏–¥–µ–æ, –∫–∞–∫ —ç—Ç–æ —Å–¥–µ–ª–∞—Ç—å')
    bot.send_video(message.chat.id, file)
    
@bot.message_handler(commands=['delete'])
def delete(message):
    if message.from_user.id != config.ADMIN_ID:
        bot.send_message(message.chat.id, '–£–≤—ã, –Ω–æ —Ç–∞–∫–æ–µ –º–æ–≥—É—Ç –¥–µ–ª–∞—Ç—å —Ç–æ–ª—å–∫–æ –≥–µ–Ω–µ—Ä–∞–ª—ã')
        return
    bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ username –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å. –°–æ–±–∞–∫—É –≤ –Ω–∞—á–∞–ª–µ —É–∫–∞–∑—ã–≤–∞—Ç—å –Ω–µ –Ω—É–∂–Ω–æ')
    bot.register_next_step_handler(message, delete_name_from_db)
    
def delete_name_from_db(message):
    conn = sqlite3.connect('mybot.db')
    cur = conn.cursor()
    name = message.text.strip()
    cur.execute("SELECT rowid FROM users WHERE username = ?", (name,))
    data = cur.fetchone()
    if not data:
        bot.reply_to(message, '–î–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç')
        cur.close()
        conn.close()
        return
    cur.execute("DELETE FROM users WHERE username = ?", (name,))
    conn.commit()
    cur.close()
    conn.close()
    bot.reply_to(message, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª—ë–Ω")
    
@bot.message_handler(commands=['help'])
def help(message):
    bot.send_message(message.chat.id, '–° –∫–∞–∫–æ–π —Å—Ç–∞—Ç–∏ –≥–µ–Ω–µ—Ä–∞–ª –¥–æ–ª–∂–µ–Ω –ø–æ–º–æ–≥–∞—Ç—å –∫–∞–∫–æ–º—É-—Ç–æ —Å–æ–ª–¥–∞—Ç–∏—à–∫–µ? –ò –≤–æ–æ–±—â–µ, –ø–æ—á–µ–º—É —Ç–µ–±–µ –∫—Ç–æ-—Ç–æ –¥–æ–ª–∂–µ–Ω –ø–æ–º–æ–≥–∞—Ç—å. –ì–µ–Ω–µ—Ä–∞–ª –ü–µ—Ä–µ–ø–µ—á–∫–æ –¥–æ–±–∏–≤–∞–ª—Å—è –≤—Å–µ–≥–æ —Å–∞–º, –∫—Ä–æ–≤—å—é –∏ –ø–æ—Ç–æ–º!!! –¢—ã –Ω–∏ –æ—Ç –∫–æ–≥–æ –Ω–µ –¥–æ–ª–∂–µ–Ω –∑–∞–≤–∏—Å–µ—Ç—å, —Ç—ã –≤–∑—Ä–æ—Å–ª—ã–π –±—É–≥–∞–π, –æ–≥—Ä–æ–º–Ω—ã–π –ª–æ–± —Å –º–æ–∑–≥–∞–º–∏, —Ç–∞–∫ —á—Ç–æ –±—ã—Å—Ç—Ä–æ –≤–∑—è–ª —Å–µ–±—è –≤ —Ä—É–∫–∏, –∑–∞—Ä—è–¥–∏–ª—Å—è –º–æ—Ç–∏–≤–∞—Ü–∏–µ–π –∏ –ø–æ—à—ë–ª –ø–æ–∫–æ—Ä—è—Ç—å —ç—Ç–æ—Ç –º–∏—Ä!')
    
@bot.message_handler(commands=['users'])
def users(message):
    if not check_registration(message):
        bot.send_message(message.chat.id, '–°–Ω–∞—á–∞–ª–∞ –Ω—É–∂–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è')
        return
    conn = sqlite3.connect('mybot.db')
    cur = conn.cursor()
    cur.execute('SELECT name, username FROM users')
    users = cur.fetchall()
    
    info = ''
    for user in users:
        info += f'–ò–º—è: {user[0]}, Username: {user[1]}\n'
    
    cur.close()
    conn.close()
    
    bot.send_message(message.chat.id, info)

@bot.message_handler(commands=['convert'])
def convert(message):
    if not check_registration(message):
        bot.send_message(message.chat.id, '–°–Ω–∞—á–∞–ª–∞ –Ω—É–∂–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è')
        return
    markup = types.InlineKeyboardMarkup(row_width=2)
    usd_eur_btn = types.InlineKeyboardButton('USD/EUR', callback_data='conv/USD/EUR')
    eur_usd_btn = types.InlineKeyboardButton('EUR/USD', callback_data='conv/EUR/USD')
    rub_cny_btn = types.InlineKeyboardButton('RUB/CNY', callback_data='conv/RUB/CNY')
    cny_rub_btn = types.InlineKeyboardButton('CNY/RUB', callback_data='conv/CNY/RUB')
    rub_usd_btn = types.InlineKeyboardButton('RUB/USD', callback_data='conv/RUB/USD')
    rub_eur_btn = types.InlineKeyboardButton('RUB/EUR', callback_data='conv/RUB/EUR')
    usd_rub_btn = types.InlineKeyboardButton('USD/RUB', callback_data='conv/USD/RUB')
    eur_rub_btn = types.InlineKeyboardButton('EUR/RUB', callback_data='conv/EUR/RUB')
    other_btn = types.InlineKeyboardButton('–î—Ä—É–≥–∞—è –ø–∞—Ä–∞ –≤–∞–ª—é—Ç', callback_data='conv/other')
    markup.add(usd_eur_btn, eur_usd_btn, rub_cny_btn, cny_rub_btn, rub_usd_btn, usd_rub_btn, rub_eur_btn, eur_rub_btn, other_btn)
    bot.send_message(message.chat.id, '–í—ã–±–µ—Ä–∏ –ø–∞—Ä—É –≤–∞–ª—é—Ç', reply_markup=markup)
    
@bot.callback_query_handler(func=lambda call: call.data.startswith('conv'))
def callback(call):
    if call.data == 'conv/other':
        bot.send_message(call.message.chat.id, '–í–≤–µ–¥–∏ –Ω—É–∂–Ω—É—é –ø–∞—Ä—É –≤–∞–ª—é—Ç —á–µ—Ä–µ–∑ / (–∫–∞–∫ –±—ã–ª–æ —É–∫–∞–∑–∞–Ω–æ –≤—ã—à–µ)')
        bot.register_next_step_handler(call.message, get_pair_of_values)
    else:
        get_pair_of_values(call.message, call.data.split('/')[1:])
    
def get_pair_of_values(message, values=None):
    if not values:
        values = message.text.upper().split('/')
        if len(values) != 2:
            bot.reply_to(message, '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç')
            bot.register_next_step_handler(message, get_pair_of_values)
            return
    bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏')
    bot.register_next_step_handler(message, get_sum, values)
    
def get_sum(message, values):
    text = message.text.strip()
    if not text.isdigit():
        bot.reply_to(message, '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ, —Å–æ–ª–¥–∞—Ç. –ß–µ–º—É —Ç–µ–±—è –≤ —à–∫–æ–ª–µ –≤–æ–æ–±—â–µ —É—á–∏–ª–∏? –í–≤–æ–¥–∏ –µ—â—ë —Ä–∞–∑!')
        bot.register_next_step_handler(message, get_sum, values)
        return
    sum = int(text)
    if sum <= 0:
        bot.reply_to(message, '–Ø –∫–æ–Ω–µ—á–Ω–æ –Ω–µ –º–∞—Ç–µ–º–∞—Ç–∏–∫, –Ω–æ –ø—Ä–æ –Ω–∞—Ç—É—Ä–∞–ª—å–Ω—ã–µ —á–∏—Å–ª–∞ —Å–ª—ã—à–∞–ª')
        bot.register_next_step_handler(message, get_sum, values)
        return
    bot.send_message(message.chat.id, '–£–∫–∞–∂–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â—É—é –≤–∞—Å –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ì–ì–ì–ì-–ú–ú-–î–î. –ï—Å–ª–∏ —Ö–æ—á–µ—Ç—Å—è –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ —Ç–µ–∫—É—â–µ–º—É –∫—É—Ä—Å—É, –Ω–∞–ø–∏—à–∏—Ç–µ today')
    bot.register_next_step_handler(message, get_date, values, sum)
    
def get_date(message, values, sum):
    text = message.text
    need_date = date.today()
    if text.lower() != 'today':
        try:
            need_date = date.fromisoformat(text)
        except ValueError:
            bot.send_message(message.chat.id, '–£–∫–∞–∑–∞–Ω–∞ –Ω–µ–≤–µ—Ä–Ω–∞—è –¥–∞—Ç–∞ –∏–ª–∏ –Ω–µ –≤ —Ç–æ–º —Ñ–æ—Ä–º–∞—Ç–µ')
            return
    try:
        res = currency.convert(sum, values[0], values[1], date=need_date)
    except ValueError:
        bot.send_message(message.chat.id, '–ì–µ–Ω–µ—Ä–∞–ª —Å –ø–æ—Ö–º–µ–ª—å—è –Ω–µ –º–æ–∂–µ—Ç –≤—ã–ø–æ–ª–Ω–∏—Ç—å –¥–∞–Ω–Ω—É—é –æ–ø–µ—Ä–∞—Ü–∏—é (—Ö–æ—Ç—è –º–æ–∂–µ—Ç –µ–º—É –ø–æ–¥—Å—É–Ω—É–ª–∏ –∫—Ä–∏–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–ª–∏ —ç—Ç–∏—Ö –≤–∞–ª—é—Ç –ø—Ä–æ—Å—Ç–æ –Ω–µ—Ç –≤ –±–∞–∑–µ)')
    except currency_converter.RateNotFoundError:
        first1, last1 = currency.bounds[values[0]]
        first2, last2 = currency.bounds[values[1]]
        if need_date > min(last1, last2):
            need_date = min(last1, last2)
        elif need_date < max(first1, first2):
            need_date = max(first1, first2)
        else:
            bot.send_message(message.chat.id, '–£–≤—ã, –Ω–æ –¥–∞–Ω–Ω—ã—Ö –ø–æ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –Ω–µ—Ç')
            return
        try:
            res = currency.convert(sum, values[0], values[1], date=need_date)
        except:
            bot.send_message(message.chat.id, '–£–≤—ã, –Ω–æ –¥–∞–Ω–Ω—ã—Ö –ø–æ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –Ω–µ—Ç')
        else:
            bot.send_message(message.chat.id, f'–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –Ω–∞—à–ª–∞—Å—å —Ç–æ–ª—å–∫–æ –ø–æ –±–ª–∏–∂–∞–π—à–µ–π –¥–∞—Ç–µ {need_date}, —Ä–µ–∑—É–ª—å—Ç–∞—Ç –æ–±–Ω–∞–ª–∞: {round(res, 2)}')
    else:
        bot.send_message(message.chat.id, f'–†–µ–∑—É–ª—å—Ç–∞—Ç –æ–±–Ω–∞–ª–∞: {round(res, 2)}')
    
@bot.message_handler()
def info(message):
    low_text = message.text.lower()
    if low_text == '–ø—Ä–∏–≤–µ—Ç':
        bot.send_message(message.chat.id, f'{message.from_user.first_name} {message.from_user.last_name}, –Ω–µ –ø—Ä–∏–≤–µ—Ç, –∞ –∑–¥—Ä–∞–≤–∏—è –∂–µ–ª–∞—é!')
    elif low_text == '–∑–¥—Ä–∞–≤–∏—è –∂–µ–ª–∞—é':
        bot.send_message(message.chat.id, f'–ó–¥—Ä–∞–≤–∏—è –∂–µ–ª–∞—é, —Ç–æ–≤–∞—Ä–∏—â –≥–µ–Ω–µ—Ä–∞–ª –ü–µ—Ä–µ–ø–µ—á–∫–æ')
    elif message.text == '–ó–¥—Ä–∞–≤–∏—è –∂–µ–ª–∞—é, —Ç–æ–≤–∞—Ä–∏—â –≥–µ–Ω–µ—Ä–∞–ª –ü–µ—Ä–µ–ø–µ—á–∫–æ':
        bot.send_message(message.chat.id, f'–í–∏–∂—É, –ø—Ä–æ–≥—Ä–µ—Å—Å–∏—Ä—É–µ—à—å –Ω–µ –ø–æ –¥–Ω—è–º, –∞ –ø–æ —á–∞—Å–∞–º. –í–æ—Ç —Ç–µ–±–µ –ø–∞—Ä–æ—á–∫—É –∏—Å—Ç–æ—Ä–∏–π –∏–∑ –º–æ–µ–π –±—É—Ä–Ω–æ–π –º–æ–ª–æ–¥–æ—Å—Ç–∏.')
        sleep(2)
        file1 = open('meme_with_black.jpg', 'rb')
        file2 = open('meme_with_money.jpg', 'rb')
        bot.send_photo(message.chat.id, file1)
        bot.send_photo(message.chat.id, file2)
        bot.send_message(message.chat.id, config.JOKE)
    elif low_text == 'id':
        bot.reply_to(message, message.from_user.id)
    elif (low_text.find('–∏–∑–≤–∏–Ω–∏') != -1 or low_text.find('–ø—Ä–æ—Å—Ç–∏') != -1 or low_text.find('–ø—Ä–æ—à—É –ø—Ä–æ—â–µ–Ω–∏—è') != -1 or 
        low_text.find('–ø—Ä–∏–Ω–æ—à—É —Å–≤–æ–∏ –∏–∑–≤–∏–Ω–µ–Ω–∏—è') != -1 or low_text.find('–∫–∞—é—Å—å') != -1 or low_text.find('–±—ã–ª –Ω–µ –ø—Ä–∞–≤') != -1 or
        low_text.find('–ø–µ—Ä–µ–≥–Ω—É–ª') != -1):
        config.COUNT_FOR_ANGRY = 0
        bot.send_message(message.chat.id, '–õ–∞–¥–Ω–æ, –ø—Ä–æ—â–∞—é –≥–ª—É–ø—Ü–∞üòè')
    else:
        if not config.COUNT_FOR_ANGRY:
            bot.send_message(message.chat.id, '–Ø –ø–æ–Ω–∏–º–∞—é, –ø—ã–ª–∫–∏–π –Ω—Ä–∞–≤, –Ω–æ –≤ –∞—Ä–º–∏–∏ –Ω–∞–¥–æ —Å–ª–µ–¥–∏—Ç—å –∑–∞ —Å–ª–æ–≤–∞–º–∏. –ü–æ–ø—Ä–æ—Å–∏ –ø—Ä–æ—â–µ–Ω–∏—è, —è –∑–∞–±—É–¥—É —ç—Ç–æ—Ç –∏–Ω—Ü–∏–¥–µ–Ω—Ç')
        elif config.COUNT_FOR_ANGRY == 1:
            bot.send_message(message.chat.id, '–ù–µ –ø–µ—Ä–µ–≥–∏–±–∞–π –ø–∞–ª–∫—É, —Å–æ–ª–¥–∞—Ç, —è –≤–µ–¥—å –º–æ–≥—É –∏ —Ä–∞—Å—Å–µ—Ä–¥–∏—Ç—å—Å—èüò†')
        elif config.COUNT_FOR_ANGRY == 2:
            bot.send_message(message.chat.id, '–î–∞—é —Ç–µ–±–µ –ø–æ—Å–ª–µ–¥–Ω–∏–π —à–∞–Ω—Å –∏–∑–≤–∏–Ω–∏—Ç—å—Å—è –∑–∞ —Å–≤–æ–∏ –≤—ã—Å–∫–∞–∑—ã–≤–∞–Ω–∏—è, –ø–æ—Ç–æ–º –∑–∞ —Å–µ–±—è –Ω–µ –æ—Ç–≤–µ—á–∞—éüò°')
        else:
            bot.send_message(message.chat.id, choice(config.PHRASES_FOR_ANSWER))
        config.COUNT_FOR_ANGRY += 1

bot.infinity_polling()